// Mocks generated by Mockito 5.4.5 from annotations
// in kite/test/presentation/home_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/foundation.dart' as _i2;
import 'package:kite/data/models/category.dart' as _i4;
import 'package:kite/data/models/content.dart' as _i5;
import 'package:kite/view_model/kite_view_model.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeValueListenable_0<T> extends _i1.SmartFake
    implements _i2.ValueListenable<T> {
  _FakeValueListenable_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [KiteViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockKiteViewModel extends _i1.Mock implements _i3.KiteViewModel {
  @override
  _i2.ValueListenable<_i4.Category?> get currentCategory =>
      (super.noSuchMethod(
            Invocation.getter(#currentCategory),
            returnValue: _FakeValueListenable_0<_i4.Category?>(
              this,
              Invocation.getter(#currentCategory),
            ),
            returnValueForMissingStub: _FakeValueListenable_0<_i4.Category?>(
              this,
              Invocation.getter(#currentCategory),
            ),
          )
          as _i2.ValueListenable<_i4.Category?>);

  @override
  _i2.ValueListenable<(_i5.Content?, List<_i5.Content>?)>
  get currentCategoryContent =>
      (super.noSuchMethod(
            Invocation.getter(#currentCategoryContent),
            returnValue:
                _FakeValueListenable_0<(_i5.Content?, List<_i5.Content>?)>(
                  this,
                  Invocation.getter(#currentCategoryContent),
                ),
            returnValueForMissingStub:
                _FakeValueListenable_0<(_i5.Content?, List<_i5.Content>?)>(
                  this,
                  Invocation.getter(#currentCategoryContent),
                ),
          )
          as _i2.ValueListenable<(_i5.Content?, List<_i5.Content>?)>);

  @override
  _i2.ValueListenable<bool> get showingCategoriesList =>
      (super.noSuchMethod(
            Invocation.getter(#showingCategoriesList),
            returnValue: _FakeValueListenable_0<bool>(
              this,
              Invocation.getter(#showingCategoriesList),
            ),
            returnValueForMissingStub: _FakeValueListenable_0<bool>(
              this,
              Invocation.getter(#showingCategoriesList),
            ),
          )
          as _i2.ValueListenable<bool>);

  @override
  void selectNextCategory() => super.noSuchMethod(
    Invocation.method(#selectNextCategory, []),
    returnValueForMissingStub: null,
  );

  @override
  void selectPreviousCategory() => super.noSuchMethod(
    Invocation.method(#selectPreviousCategory, []),
    returnValueForMissingStub: null,
  );

  @override
  void selectNextCluster() => super.noSuchMethod(
    Invocation.method(#selectNextCluster, []),
    returnValueForMissingStub: null,
  );

  @override
  void selectPreviousCluster() => super.noSuchMethod(
    Invocation.method(#selectPreviousCluster, []),
    returnValueForMissingStub: null,
  );

  @override
  void selectContent(_i5.Content? content) => super.noSuchMethod(
    Invocation.method(#selectContent, [content]),
    returnValueForMissingStub: null,
  );

  @override
  void selectCategory(_i4.Category? category) => super.noSuchMethod(
    Invocation.method(#selectCategory, [category]),
    returnValueForMissingStub: null,
  );

  @override
  void toggleCategoriesList() => super.noSuchMethod(
    Invocation.method(#toggleCategoriesList, []),
    returnValueForMissingStub: null,
  );
}
